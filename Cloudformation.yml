AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Resume-Parser

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: term-assignment

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: resumeparservpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: resumeparserig

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
 
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  DevRouteAssos:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for public resources
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ResumeParserJobs:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ResumeParser_Jobs
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ResumeParserJobApplications:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ResumeParser_JobApplications
      AttributeDefinitions:
        - AttributeName: applicationId
          AttributeType: S
      KeySchema:
        - AttributeName: applicationId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ResumeParserUsers:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ResumeParser_Users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: resume-parser-term-project-s3
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - "Authorization"
            MaxAge: 3000
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: YolaLambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: arn:aws:dynamodb:*:*:table/ResumeParser_*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: arn:aws:s3:::resume-parser/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                  - textract:DetectDocumentText
                Resource: "*"

  ResumeParserSubmitJobApplication:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_SubmitJobApplication
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-job-application
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserResumeExtraction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_ResumeExtraction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-resume-extraction
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserAddJob:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_AddJob
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-add-job
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserJobsList:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_JobsList
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-jobs-list
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60
  
  ResumeParserJobDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_JobDetails
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-job-details
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserUpdateJob:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_UpdateJob
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-update-job
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserDeleteJob:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_DeleteJob
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-delete-job
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserUserLogin:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_UserLogin
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: resume-parser-yola-user-login
        S3Key: Archive.zip
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 60

  ResumeParserUserRegistration:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResumeParser_UserRegistration
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-yola-user-registration
        S3Key: Archive.zip
      MemorySize: 128
      Timeout: 60

  ResumeParserApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ResumeParser
      Description: API Gateway for Resume Parser

  ApplyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ResumeParserApi.RootResourceId
      PathPart: "apply"
      RestApiId: !Ref ResumeParserApi

  ApplyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref ApplyResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"  
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserSubmitJobApplication.Arn}/invocations"

  ApplyApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserSubmitJobApplication.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/POST/apply"

  ExtractResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ResumeParserApi.RootResourceId
      PathPart: "extract"
      RestApiId: !Ref ResumeParserApi

  ExtractMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref ExtractResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserResumeExtraction.Arn}/invocations"

  ExtractApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserResumeExtraction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/POST/extract"

  JobResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ResumeParserApi.RootResourceId
      PathPart: job
      RestApiId: !Ref ResumeParserApi

  JobMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref JobResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserJobDetails.Arn}/invocations"

  JobApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserJobDetails.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/POST/job"

  JobsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ResumeParserApi.RootResourceId
      PathPart: jobs
      RestApiId: !Ref ResumeParserApi

  JobsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref JobsResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserJobsList.Arn}/invocations"

  JobsGetApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserJobsList.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/GET/jobs"

  JobsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref JobsResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserAddJob.Arn}/invocations"

  JobsPostApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserAddJob.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/POST/jobs"

  JobsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref JobsResource
      HttpMethod: PUT
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserUpdateJob.Arn}/invocations"

  JobsPutApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserUpdateJob.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/PUT/jobs"

  JobsDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref JobsResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: DELETE
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserDeleteJob.Arn}/invocations"
      
  JobsDeleteApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserDeleteJob.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/DELETE/jobs"

  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ResumeParserApi.RootResourceId
      PathPart: login
      RestApiId: !Ref ResumeParserApi

  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserUserLogin.Arn}/invocations"
      
  LoginApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserUserLogin.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/POST/login"

  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ResumeParserApi.RootResourceId
      PathPart: register
      RestApiId: !Ref ResumeParserApi

  RegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ResumeParserApi
      ResourceId: !Ref RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeParserUserRegistration.Arn}/invocations"
      
  RegisterApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ResumeParserUserRegistration.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ResumeParserApi}/*/POST/register"

  ResumeParserApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ResumeParserApi
      StageName: prod
    DependsOn:
      - ApplyMethod
      - ExtractMethod
      - JobMethod
      - JobsGetMethod
      - JobsPostMethod
      - JobsPutMethod
      - JobsDeleteMethod
      - LoginMethod
      - RegisterMethod

  ReactAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-04a81a99f5ec58529
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref PublicSecurityGroup
      KeyName: !Ref KeyPairName
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -e
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
 
          echo "Starting script execution..."
 
          # Update and install necessary packages
          sudo apt-get update -y
          sudo apt-get install -y git nodejs npm nginx
 
          echo "Packages updated and installed."
 
          # Clone the project repository
          GIT_REPO_URL="https://github.com/Yola21/Job-ATS.git"
          sudo git clone "$GIT_REPO_URL" /home/ubuntu/react-app
 
          echo "Repository cloned."
 
          # Change to the project directory
          cd /home/ubuntu/react-app/Frontend

          API_URL="https://${ResumeParserApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
 
          echo "REACT_APP_API_URL=$API_URL | sudo tee .env
          # Install npm dependencies and build the project
          sudo npm install
          sudo npm run build
 
          echo "npm dependencies installed and project built."
 
          # Configure Nginx to proxy requests to the Node.js application
          PUBLIC_IP=$(curl -s http://checkip.amazonaws.com)
          echo "Public IP address: $PUBLIC_IP"
 
          echo '
          server {
              listen 80;
              server_name $PUBLIC_IP;  # Using "_" to accept all requests
 
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }' | sudo tee /etc/nginx/sites-available/react-app
 
          sudo ln -s /etc/nginx/sites-available/react-app /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl restart nginx
 
          # Install PM2 and start the application
          sudo npm install -g pm2
          sudo pm2 start npm --name "resume-parser" -- start
          sudo pm2 save
          sudo pm2 startup
 
          echo "PM2 installed and application started."
 
          echo "Nginx configured to proxy requests to Node.js application."
          echo "Script execution completed."
          echo $API_URL
 
  ReactAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref ReactAppLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: ReactAppInstance
          PropagateAtLaunch: true
 
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ReactAppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0
 
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ReactAppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30.0

Outputs:
  ApiUrl:
    Description: The URL of the API Gateway
    Value: !Sub "https://${ResumeParserApi}.execute-api.${AWS::Region}.amazonaws.com/prod"