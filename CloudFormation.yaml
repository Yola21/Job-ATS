AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Resume-Parser

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: term-assignment

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: resumeparservpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: resumeparserig

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
 
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  DevRouteAssos:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for public resources
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for private resources
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PublicSecurityGroup
    
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      KeyName: !Ref KeyPairName
      ImageId: ami-080e1f13689e07408
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: resumeparserec2

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: resume-parser-s3
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - "Authorization"
            MaxAge: 3000

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: "arn:aws:iam::211125373952:role/LabRole"
      Runtime: nodejs20.x
      Code:
        S3Bucket: resume-parser-code
        S3Key: resumeparser.zip
      Tags:
        - Key: Name
          Value: resumeparserlambda

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ResumeParserSNS
      TopicName: ResumeParserSNS

  UploadAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ResumeParserAPI
      Description: API Gateway for Resume Parser
    DependsOn:
        LambdaFunction
 
  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt UploadAPIGateway.RootResourceId
      PathPart: "upload"
      RestApiId: !Ref UploadAPIGateway
    DependsOn:
        UploadAPIGateway
 
  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UploadAPIGateway
      ResourceId: !Ref UploadResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"    
    DependsOn:
        UploadResource
 
  UploadDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref UploadAPIGateway
      StageName: prod
    DependsOn:
        UploadMethod
  
  UploadGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      UploadDeployment

Outputs:
  SNSArn:
    Value: !Ref SNSTopic
    Description: ARN of the SNS topic created
